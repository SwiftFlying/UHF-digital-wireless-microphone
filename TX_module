
// Recieve I2S audio from codec over arduino due SSC
// Encode each 16bit sample into an IMA_ADPCM 4 bit smaple
// build 1 byte out of 2 x EMA_ADPCM samples and add it to the circular buffer.
// when there are 48 bytes in buffer TX the 48 bytes with RH_RF24

// include 2wire ( i2c )
#include <Wire.h>

// include necessary libraries
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include <math.h>

#include <LiquidCrystal_I2C.h>

// include libraries for UHF tx
#include <SPI.h>
#include <RH_RF24.h>  // radiohead low level driver lib for RF24 ( SI4463 module )

// include IMA ADPCM encoder decoder lib
#include <IMA_ADPCM.h>

// instance of the radio driver now called rf24
RH_RF24 rf24(10,2); // pin 10 cs , pin 2 irq

// obstantiate IMA_ADPCM codec
IMA_ADPCM encoderADPCM;  // make IMA_ADPCM instance for encoder

// define & include stuff that libltc needs here
#include "ltc.h"
#include "encoder.h"
#include "decoder.h"

// variables for samples & packet handling
 
signed short samplesA[240]; // pingpong array A
signed short samplesB[240]; // pingpong array B

signed short *backbuffer; // pointer
signed short *activebuffer; // pointer

volatile int16_t bufferpointer = 0;

uint8_t adpcm[240]; // adpcm unsighned byte buffer
uint8_t len = 240; // RF packet leghth in bytes

// uint32_t readValue; // 32bit read value for circular buffer

// counters
int buffcount = 0; // for packet
int counter = 0;

// for libltc?

int samplesperframe = 240;  // 48000khz / 25fps , samples per frame for libLTC
LTCDecoder *decoder;  // should this be a pointer ? 

// WM8731 setup

#define LINVOL 20
#define RINVOL 20
#define LHPVOL 127
#define RHPVOL 127
#define ADCHPD 0
#define SIDEATT 0
#define SIDETONE 0
#define DACSEL 1
#define BYPASS 0
#define INSEL 1
#define MUTEMIC 0
#define MICBOOST 1
#define SAMPLE_RATE 8
#define BIT_RATE 32  // 16 24 or 32 bit modes  (  SSC I2S lib wants 32bit per channel, less bitrate is left justified in 32bit )


// I2S IO library 
#include <HiFi.h>

// prototyoe codecRxReadyInterrupt codecTxReadyInterrupt functions
void codecTxReadyInterrupt(HiFiChannelID_t);
void codecRxReadyInterrupt(HiFiChannelID_t);

uint32_t ldat = 0;
uint32_t rdat = 0;

// ---- end I2S lib -------

// ------- protoype functions
void ltcDECODE(); // decode incoming uint8_t samples that contain LTC
void TX();        // encode samples to ADPCM and TX 240byte packet
void initialcodec();  // initialize audio codec hardware
void ltcDECODE(); // decode LTC from active buffer?


// ------- END user prototyping --------------
LiquidCrystal_I2C lcd(0x27,20,4);  // set the LCD address to 0x27 for a 16 chars and 2 line displayLiquid

void setup() {

 // create ltc decoder called decoder with n samples per frame
  decoder = ltc_decoder_create(samplesperframe, 0);  

 Serial.begin(115200);


 //    LiquidCrystal_I2C lcd(0x27,20,4);  // set the LCD address to 0x27 for a 16 chars and 2 line display
  delay (10);
  lcd.init();                      // initialize the lcd 
  delay(10);
  lcd.backlight(); 
  delay (10);
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("BB-box, Audio TX");
  lcd.setCursor(0,1);
  lcd.print("Digital Modulation 1");
  lcd.setCursor(0,2);
  lcd.print("Brexiteer's regret");
  lcd.setCursor(0,3);
  lcd.print("edition v1.1");
  delay ( 2000 );
  lcd.clear();


  initialcodec();  // initialize audio codec hardware

 // Initialize the Arduino SSC codec

  // set SSC DUE I2S codec into reset
  pinMode(7, OUTPUT);
  digitalWrite(7, LOW);

  HiFi.begin();

  // Configure transmitter for 2 channels, external TK/TF clocks, 32 bit per
  // channel (data less than 32-bit is left justified in the 32 bit word, but
  // codec config needs 32 clocks per channel).
   HiFi.configureTx(HIFI_AUDIO_MODE_STEREO, HIFI_CLK_MODE_USE_EXT_CLKS, 32);

  // Same config as above, except sync the receiver to transmitter (RK/RF
  // clock signals not needed)
   HiFi.configureRx(HIFI_AUDIO_MODE_STEREO, HIFI_CLK_MODE_USE_TK_RK_CLK, 32);
  //   HiFi.configureRx(HIFI_AUDIO_MODE_STEREO, HIFI_CLK_MODE_USE_EXT_CLKS, 32);

     
  // Since we've decided to sync the receiver to the transmitter, we could
  // handle both reading and writing in a single interrupt (receive or
  // transmit).  This example uses both just for demonstration purposes.
  HiFi.onTxReady(codecTxReadyInterrupt);
  HiFi.onRxReady(codecRxReadyInterrupt);

  // release codec from reset
  digitalWrite(7, HIGH);

  // Enable both receiver and transmitter.
  HiFi.enableRx(true);
  HiFi.enableTx(true);

// initialze UHF RF24 TX module

rf24.init();  // initialize rf module
 
// rf24.setModemConfig(RH_RF24::GFSK_Rb150Fd300);  // GFSK_Rb5Fd10 // GFSK_Rb150Fd300
// rf24.setFrequency(434.00);  //
// rf24.setTxPower(0x05);
 
 rf24.setModemConfig(RH_RF24::GFSK_Rb150Fd300);  // setup modulation 
 rf24.printRegisters(); // dump config info to serial port
 delay(100);

/// ------

// initilize ping pong buffer
bufferpointer = 0;
activebuffer = samplesA;
backbuffer = samplesB;

}  //// ----------- END void SETUP

void loop() 
{
// is packet ready ?
if ( buffcount >= 240 ) { 

if ( bufferpointer == '0' )  // FLIP the pingpong buffer
    {
  bufferpointer = 1;
  activebuffer = samplesB;
  backbuffer   = samplesA;
     }
else                         // FLIP the pingpong buffer
    {
  bufferpointer = 0;
  activebuffer = samplesA;
  backbuffer   = samplesB; 
    }

 buffcount = 0; // reset the samples count
 
TX(); // encode and TX current buffer
 
 }

// ssc.assc_get_status(Ssc *p_ssc);   // whats this ??
//  ssc_is_rx_ready(Ssc *p_ssc);    /// whats this ???
// lcd.setBacklight(HIGH);
// lcd.display();
// You cannot Serial.print anything in loop

} // end void

/// I2S READ WRITE functions
 void codecTxReadyInterrupt(HiFiChannelID_t channel)
 {
  if (channel == HIFI_CHANNEL_ID_1)
  {
    // Left channel
      HiFi.write(ldat);
  }
  else
  {
    // Right channel
    HiFi.write(rdat); 
    }
  }
  
void codecRxReadyInterrupt(HiFiChannelID_t channel)
{
  if (channel == HIFI_CHANNEL_ID_1)
  {
 // 32bit to unsigned 16bit samples to buffer without going via ldat
    backbuffer[buffcount] = ((( HiFi.read() & 0xFFFF0000) >> 16) -32767);

 // backbuffer[buffcount] = (((ldat & 0xFFFF0000) >> 16) -32767);// reduce 32it unsigned sample to signed 16 bit

buffcount++;
   }
  else
  {
    // Right channel
     rdat = HiFi.read();
   }  
}

void TX()
{

// encode ready buffer " 240 byte packet " to ADPCM
int destOffset = 4;  // for ADPCM
size_t srcSize = 960; // 4 * total bytes in array for ADPCM 
encoderADPCM.EncodeInit(activebuffer[0],activebuffer[1]);
encoderADPCM.Encode(adpcm,destOffset,activebuffer,srcSize); // http://yxit.co.uk/source/documentation/classIMA__ADPCM.html#a5edba64af436b76785bbc796f6876299

ltcDECODE(); // decode buffer time code ???

rf24.send(adpcm,len);  // TX 240 byte packet
// rf24.waitPacketSent();  // dont know if we need this ???

counter ++;  // packet count increment
lcd.setCursor(0,1);
lcd.print(counter);  // sent packet number to screen for testing

}

void ltcDECODE()   // if ( ltc_decoder_read ( decoder "dev" , &frame " is this the sample?" ) > 0 { the decode samples and print??? 
{
  LTCFrameExt activebuffer; // LTCFrameExt frame;
 if (ltc_decoder_read (decoder, &activebuffer) > 0) {
   SMPTETimecode stime;
              ltc_frame_to_time(&stime, &activebuffer.ltc, 1);
              Serial.print(stime.hours);
              Serial.print(stime.mins);
             Serial.print(stime.secs);
            Serial.print(stime.frame);
    }  
  }  // END ltcDECODE
 
void initialcodec() {
  
 // Initialize the WM8731
  Serial.println( "Initializing" );
  delay(10);

   Wire.begin();
  Wire.beginTransmission(0x1e);
  Wire.write(0x1e); // reset reg
  Wire.write(B00000000); // do reset
  Wire.endTransmission();

// delay(50);

  Wire.begin();
  Wire.beginTransmission(0x1a);
  Wire.write(0x0c); // power reduction register
  Wire.write(0x00); // turn everything on
  Wire.endTransmission();

  delay(10);

  Wire.beginTransmission(0x1a);
  Wire.write(0x0e); // digital data format REG 00001110   0x0e    

#if BIT_RATE == 32  // needs to be an if not elif ( else if ? ) 
  Wire.write(0x72);  // 32bit,MASTER MODE  ' 01110010  left justified = 0x72 works /// I2S mode test  10110010 = B2 does'nt work !!

#elif BIT_RATE == 24
  Wire.write(0x62);   // 24bit,MASTER MODE  01100010  left justified

#elif BIT_RATE == 16
  Wire.write(0x42);   // 16bit,MASTER MODE  01000010  left justified

#endif
 Wire.endTransmission();

 delay(10);

  Wire.beginTransmission(0x1a);
  Wire.write(0x10); // clock configuration
#if SAMPLE_RATE == 88
  Wire.write(0xbc);
#elif SAMPLE_RATE == 48
  Wire.write(0x00);
#elif SAMPLE_RATE == 44
  Wire.write(0xa0);
#elif SAMPLE_RATE == 32
  Wire.write(0x0C);         // BIN 00001100
#elif SAMPLE_RATE == 22
  Wire.write(0xe0);
#elif SAMPLE_RATE == 8
  Wire.write(0xac);
#elif SAMPLE_RATE == 2
  Wire.write(0xce);
#endif
  Wire.endTransmission();
  
  delay(10);

  Wire.beginTransmission(0x1a);
  Wire.write(0x12); // digital interface active
  Wire.write(0x01);
  Wire.endTransmission();

  delay(10);
 
  Wire.beginTransmission(0x1a);
  Wire.write(0x0a); // digital audio path configuration
  Wire.write((uint8_t)ADCHPD);
  Wire.endTransmission();

  delay(10);

  Wire.beginTransmission(0x1a);
  Wire.write(0x00); // left in setup register
  Wire.write((uint8_t)LINVOL);
  Wire.endTransmission();

  delay(10);

  Wire.beginTransmission(0x1a);
  Wire.write(0x02); // right in setup register
  Wire.write((uint8_t)RINVOL);
  Wire.endTransmission();

  delay(10);

  Wire.beginTransmission(0x1a);
  Wire.write(0x04); // left headphone out register
  Wire.write((uint8_t)LHPVOL);
  Wire.endTransmission();

  delay(10);

  Wire.beginTransmission(0x1a);
  Wire.write(0x06); // right headphone out register
  Wire.write((uint8_t)RHPVOL);
  Wire.endTransmission();

  delay(10);

  Wire.beginTransmission(0x1a);
  Wire.write(0x08); // analog audio pathway configuration
  Wire.write((uint8_t)((SIDEATT << 6) | (SIDETONE << 5) | (DACSEL << 4) | (BYPASS << 3) | (INSEL << 2) | (MUTEMIC << 1) | (MICBOOST << 0)));
  Wire.endTransmission();

  delay(50);

  Serial.println( "codec initialized" );
} 
// end initialisecodec
