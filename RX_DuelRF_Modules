//  Digital Wireless UHF radio mic with True Diversity Reciever & LTC timecode.
//  Timecode cuurently disabled.
//  WM8731 codec with I2S IO for Arduino Due
//  radiohead RF24 recieving with 2 x modules in true diversity mode.
//  if RSSI1 >= RSSI2 then module1 is used to recieve packet. 

// include 2wire ( i2c )
#include <Wire.h>
#include <LiquidCrystal_I2C.h>  // not really working properly with arduino DUE , more DUE strange issues
// include necessary libraries
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <SPI.h>
// include RH_RF24 for UHF RX
#include <RH_RF24.h>

// include IMA ADPCM encoder decoder lib
#include <IMA_ADPCM.h>

// instance of the radio driver now called rf24
RH_RF24 rf24module1(10, 2, 9); // pin 10 cs, pin 2 inturrupt IRQ pin on module, Nsel ( power ) pin 9  
RH_RF24 rf24module2(11, 3, 8); // pin 11 cs, pin 3 inturrupt IRQ pin on module, Nsel ( power ) pin 8

// obstantiate IMA_ADPCM codec decoder
IMA_ADPCM decoderADPCM;  // make IMA_ADPCM instance for decoder

// define & include stuff that libltc needs here
#include "ltc.h"
#include "encoder.h"
#include "decoder.h"

uint32_t samples[420]; // final 32bit samples to output over I2S to codec
int16_t tempsamples[420]; /// temp decoded adpcm samples recieved from ADPCM decoder ( it outputs int16_t ) 

// variables for samples & packet handling
 
uint8_t samplesA[240]; // pingpong array A
uint8_t samplesB[240]; // pingpong array B

uint8_t *backbuffer; // pointer
uint8_t *activebuffer; // pointer
volatile int16_t bufferpointer = 0;

uint8_t adpcm[240]; // adpcm unsighned byte buffer
uint8_t len = 240; // RF packet leghth in bytes

// counters
int flag = 1;  // rssi winner slect module
int buffcount = 0;
int counter = 0;

uint8_t RSSI1 = 0;
uint8_t RSSI2 = 1;

int samplesperframe = 240;  // 48000khz / 25fps , samples per frame

LTCDecoder *decoder;  //

// WM8731 setup

#define LINVOL 20
#define RINVOL 20
#define LHPVOL 127
#define RHPVOL 127
#define ADCHPD 0
#define SIDEATT 0
#define SIDETONE 0
#define DACSEL 1
#define BYPASS 0
#define INSEL 1
#define MUTEMIC 0
#define MICBOOST 1
#define SAMPLE_RATE 8
#define BIT_RATE 32  // 16 24 or 32 bit modes  (  SSC I2S lib wants 32bit per channel, less bitrate is left justified in 32bit )

// I2S IO library 

#include <HiFi.h>

void codecTxReadyInterrupt(HiFiChannelID_t);
void codecRxReadyInterrupt(HiFiChannelID_t);

uint32_t ldat = 0;
uint32_t rdat = 0;

// make screen type
 LiquidCrystal_I2C lcd(0x27,20,4);  // set the LCD address to 0x27 for a 16 chars and 2 line display


void setup() {

  delay(10);
  lcd.init();                      // initialize the lcd 
  delay(10);
  lcd.backlight(); 
  delay (10);
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("BB-box Audio RX");
  lcd.setCursor(0,1);
  lcd.print("Dual True Diversity");
  lcd.setCursor(0,2);
  lcd.print("Brexiteer's regret");
  lcd.setCursor(0,3);
  lcd.print("edition v1.1");
  delay ( 2000 );
  lcd.clear();
  
initialcodec();  // initialize audio codec hardware

// create ltc decoder called decoder with n samples per frame
  decoder = ltc_decoder_create(samplesperframe, 0);  

  Serial.begin(115200);

 // Initialize the Arduino SSC codec

  // set SSC DUE I2S codec into reset
  pinMode(7, OUTPUT);
  digitalWrite(7, LOW);

  HiFi.begin();

  // Configure transmitter for 2 channels, external TK/TF clocks, 32 bit per
  // channel (data less than 32-bit is left justified in the 32 bit word, but
  // codec config needs 32 clocks per channel).
  HiFi.configureTx(HIFI_AUDIO_MODE_STEREO, HIFI_CLK_MODE_USE_EXT_CLKS, 32);

  // Same config as above, except sync the receiver to transmitter (RK/RF
  // clock signals not needed)
  HiFi.configureRx(HIFI_AUDIO_MODE_STEREO, HIFI_CLK_MODE_USE_TK_RK_CLK, 32);

  // Since we've decided to sync the receiver to the transmitter, we could
  // handle both reading and writing in a single interrupt (receive or
  // transmit).  This example uses both just for demonstration purposes.
  HiFi.onTxReady(codecTxReadyInterrupt);
  HiFi.onRxReady(codecRxReadyInterrupt);

  // release codec from reset
  digitalWrite(7, HIGH);

  // Enable both receiver and transmitter.
  HiFi.enableRx(true);
  HiFi.enableTx(true);

// initialze UHF RF24 TX module

rf24module1.init();  // initialize rf module
delay(100);
rf24module2.init(); // initialize rf module2
delay(100);
 
// rf24module1.setFrequency(434.00);  //
// rf24module2.setFrequency(434.00);  //
 
 //  rf24module1.setTxPower(0x05);
 //  rf24module2.setTxPower(0x05);

 rf24module1.setModemConfig(RH_RF24::GFSK_Rb150Fd300);
 rf24module2.setModemConfig(RH_RF24::GFSK_Rb150Fd300);
 
 rf24module1.printRegisters(); // dump config module1 serial port
 rf24module2.printRegisters(); // dump config module2 serial port

}
/// END SETUP

void loop() 
{
 if ((rf24module1.available()) && ( RSSI1 >= RSSI2 )) { RX1(); }  // recieve packet module 1
 else if (rf24module2.available()) { RX2(); }  // recieve packet from module 2

// buffcount is reset in the RX1 & RX2 and is incremented +1 in the codecTxReadyInterrupt
// NOt sure if there is time for doing anyting with this inturrupt !! ?
// only using one pingpong buffer for recieve packet and decode ADPCM , very unsure whats happening there.  

ltcDECODE();   // who knows , worth a try !!

}  // end void loop 


/// I2S IO loopthrough functions
 void codecTxReadyInterrupt(HiFiChannelID_t channel)
{
  if (channel == HIFI_CHANNEL_ID_1)
  {
    // Left channel
    HiFi.write(samples[buffcount]);
    buffcount ++;
  }
  else
  {
    // Right channel
    HiFi.write(rdat);  // nothing // keeping because of timing issues.
  }
}

void codecRxReadyInterrupt(HiFiChannelID_t channel)
{
  if (channel == HIFI_CHANNEL_ID_1)
  {
    //  Left channel
     ldat = HiFi.read();  // THIS SHOULD BE DISABLED?????
    
  }
  else
  {
    // Right channel
     rdat = HiFi.read();   // THIS SHOULD BE DISABLED?????
      
   }  
}


void RX1()     // RX PACKET MOD1 AND DECODE ADPCM , EXPAND to 32bit
    {   
   int srcOffset = 4;
   uint16_t srcSize = 1920; // number of bits to be read from source 
   uint8_t len = 240;
if (rf24module1.recv(activebuffer, &len))
    {
 lcd.setCursor(0,1);
 lcd.print(counter);
   RSSI1 = ((uint8_t)rf24module1.lastRssi(), DEC);
   counter++;
   // Serial.println("got packet :)");

   decoderADPCM.Decode(tempsamples,backbuffer,srcOffset,srcSize);

for ( int a=0; a<47; a++ ) { samples[a] = (((tempsamples[a]) +32767) <<16); } // load 

   if ( bufferpointer == '0' )  // FLIP the pingpong buffer
    {
  bufferpointer = 1;
  activebuffer = samplesB;
  backbuffer   = samplesA;
     }
else                         // FLIP the pingpong buffer
    {
  bufferpointer = 0;
  activebuffer = samplesA;
  backbuffer   = samplesB; 
    }

 buffcount = 0; // reset the samples count
 

   }
 } 


 void RX2()   // RX PACKET MOD2 AND DECODE ADPCM , EXPAND to 32bit
    {   
   int srcOffset = 4;
   uint16_t srcSize = 1920; // number of bits to be read from source 
   uint8_t len = 240;
if (rf24module2.recv(activebuffer, &len))
    {
 lcd.setCursor(0,1);
 lcd.print(counter);
   RSSI2 = ((uint8_t)rf24module1.lastRssi(), DEC);
   counter++;
   // Serial.println("got packet :)");

 decoderADPCM.Decode(tempsamples,activebuffer,srcOffset,srcSize);

for ( int a=0; a<240; a++ )
    {
       samples[a] = (((tempsamples[a]) +32767) <<16);  // expand to 32bit for I2S output
      
    } 

   if ( bufferpointer == '0' )  // FLIP the pingpong buffer
    {
  bufferpointer = 1;
  activebuffer = samplesB;
  backbuffer   = samplesA;
     }
else                            // FLIP the pingpong buffer
    {
  bufferpointer = 0;
  activebuffer = samplesA;
  backbuffer   = samplesB; 
    }

 buffcount = 0; // reset the samples count
 

   }
 }   /// END of main functions


/// work on this more! 

void ltcDECODE()   // if ( ltc_decoder_read ( decoder "dev" , &frame " is this the sample?" ) > 0 { the decode samples and print??? 
{
  LTCFrameExt tempsamples; // LTCFrameExt frame;
 if (ltc_decoder_read (decoder, &tempsamples) > 0) {
   SMPTETimecode stime;
              ltc_frame_to_time(&stime, &tempsamples.ltc, 1);

             // might have trouble printing this to LCD display , more problems using the DUE + liquidcrystal lib 
             Serial.print(stime.hours); 
             Serial.print(stime.mins);
             Serial.print(stime.secs);
             Serial.print(stime.frame);
    }  
  }  // END ltcDECODE

/// initialise codec after here to end ... // 

/// initialise code function
void initialcodec() {
  
 // Initialize the WM8731
  Serial.println( "Initializing" );
  delay(10);

   Wire.begin();
  Wire.beginTransmission(0x1e);
  Wire.write(0x1e); // reset reg
  Wire.write(B00000000); // do reset
  Wire.endTransmission();

// delay(50);

   Wire.begin();
  Wire.beginTransmission(0x1a);
  Wire.write(0x0c); // power reduction register
  Wire.write(0x00); // turn everything on
  Wire.endTransmission();

  delay(10);

   Wire.beginTransmission(0x1a);
  Wire.write(0x0e); // digital data format REG 00001110   0x0e
#if BIT_RATE == 32
  Wire.write(0x72);  // 32bit,MASTER MODE  01110010  left justified
#elif BIT_RATE == 24
  Wire.write(0x62);   // 24bit,MASTER MODE  01100010  left justified
#elif BIT_RATE == 16
  Wire.write(0x42);   // 16bit,MASTER MODE  01000010  left justified
#endif
  Wire.endTransmission();

  delay(10);

    Wire.beginTransmission(0x1a);
  Wire.write(0x10); // clock configuration
#if SAMPLE_RATE == 88
  Wire.write(0xbc);
#elif SAMPLE_RATE == 48
  Wire.write(0x00);
#elif SAMPLE_RATE == 44
  Wire.write(0xa0);
#elif SAMPLE_RATE == 32
  Wire.write(0x0C);         // BIN 00001100
#elif SAMPLE_RATE == 22
  Wire.write(0xe0);
#elif SAMPLE_RATE == 8
  Wire.write(0xac);
#elif SAMPLE_RATE == 2
  Wire.write(0xce);
#endif
  Wire.endTransmission();
  
  delay(10);

  Wire.beginTransmission(0x1a);
  Wire.write(0x12); // digital interface active
  Wire.write(0x01);
  Wire.endTransmission();

  delay(10);

    Wire.beginTransmission(0x1a);
  Wire.write(0x0a); // digital audio path configuration
  Wire.write((uint8_t)ADCHPD);
  Wire.endTransmission();

  delay(10);

  Wire.beginTransmission(0x1a);
  Wire.write(0x00); // left in setup register
  Wire.write((uint8_t)LINVOL);
  Wire.endTransmission();

  delay(10);

  Wire.beginTransmission(0x1a);
  Wire.write(0x02); // right in setup register
  Wire.write((uint8_t)RINVOL);
  Wire.endTransmission();

  delay(10);

  Wire.beginTransmission(0x1a);
  Wire.write(0x04); // left headphone out register
  Wire.write((uint8_t)LHPVOL);
  Wire.endTransmission();

  delay(10);

  Wire.beginTransmission(0x1a);
  Wire.write(0x06); // right headphone out register
  Wire.write((uint8_t)RHPVOL);
  Wire.endTransmission();

  delay(10);

  Wire.beginTransmission(0x1a);
  Wire.write(0x08); // analog audio pathway configuration
  Wire.write((uint8_t)((SIDEATT << 6) | (SIDETONE << 5) | (DACSEL << 4) | (BYPASS << 3) | (INSEL << 2) | (MUTEMIC << 1) | (MICBOOST << 0)));
  Wire.endTransmission();

  delay(50);

  Serial.println( "codec initialised" );
} 
// end initialisecodec

